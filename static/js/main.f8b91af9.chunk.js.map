{"version":3,"sources":["lib/Helpers.js","components/home/Home.js","components/projects/Projects.js","components/home/Navbar.js","Router.js","App.js","serviceWorker.js","index.js"],"names":["getRealPathname","pathname","window","location","includes","replace","getRealRoute","Home","className","size","icon","src","col","Projects","Navbar","props","onClick","handleNavbarClick","selectedKeys","current","mode","theme","Item","key","type","to","Router","useState","setCurrent","Fragment","e","exact","path","component","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4QAAaA,EAAkB,WAC7B,IAAMC,EAAWC,OAAOC,SAASF,SAEjC,OADqBA,EAASG,SAAS,aAAeH,EAASI,QAAQ,cAAe,IAAMJ,EAASI,QAAQ,MAAO,KAIzGC,EAAe,WAC1B,OAAOJ,OAAOC,SAASF,SAASI,QAAQ,MAAO,KCiClCE,EApCF,WAcX,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,mBACb,kBAAC,IAAD,CAAQC,KAAM,IAAKC,KAAK,OAAOC,IAAsB,cAAjBL,EAAA,yEAEtC,yBAAKE,UAAU,QACb,qDAEF,yBAAKA,UAAU,OAAf,gCAGA,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKI,IAAK,GAAV,sCACA,kBAAC,IAAD,CAAKA,IAAK,GAAV,mDCtBKC,EARE,WACf,OACE,uD,iBC4BWC,EA5BA,SAACC,GACd,OACE,kBAAC,IAAD,CACEC,QAASD,EAAME,kBACfC,aAAcH,EAAMI,QACpBC,KAAK,aACLC,MAAM,QAEN,kBAAC,IAAKC,KAAN,CAAWC,IAAI,QACb,kBAAC,IAAD,CAAMC,KAAK,QADb,cAIA,kBAAC,IAAKF,KAAN,CAAWC,IAAI,QACb,kBAAC,IAAD,CAAME,GAAG,KACP,kBAAC,IAAD,CAAMD,KAAK,SADb,SAKF,kBAAC,IAAKF,KAAN,CAAWC,IAAI,YACb,kBAAC,IAAD,CAAME,GAAG,aACP,kBAAC,IAAD,CAAMD,KAAK,YADb,eCeOE,EA3BA,WAAO,IAAD,EACWC,mBAA+B,KAAtB3B,IAA2B,OAASA,KADxD,mBACZmB,EADY,KACHS,EADG,KAQnB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,CACIV,QAASA,EACTF,kBAXgB,SAAAa,GACV,SAAVA,EAAEP,KACJK,EAAWE,EAAEP,QAYX,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOQ,OAAK,EAACC,KAAK,IAAIC,UAAY1B,IAClC,kBAAC,IAAD,CAAOyB,KAAK,YAAYC,UAAYpB,SCnBjCqB,EARH,WACV,OACE,yBAAK1B,UAAU,OACb,kBAAC,EAAD,QCMc2B,QACW,cAA7BjC,OAAOC,SAASiC,UAEe,UAA7BlC,OAAOC,SAASiC,UAEhBlC,OAAOC,SAASiC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f8b91af9.chunk.js","sourcesContent":["export const getRealPathname = () => {\n  const pathname = window.location.pathname;\n  const realPathname = pathname.includes(\"portfolio\") ? pathname.replace(\"/portfolio/\", \"\") : pathname.replace(/\\//g, \"\");\n  return realPathname;\n}\n\nexport const getRealRoute = () => {\n  return window.location.pathname.replace(/\\//g, \"\");\n}\n","import React, { useState, useEffect } from 'react';\nimport { Avatar, Row, Col } from 'antd';\nimport { getRealRoute } from '../../lib/Helpers';\n\nconst Home = () => {\n  // const [shit, setShit] = useState(\"\");\n  // const [something, setSomething] = useState(\"\");\n  //\n  // useEffect(() => {\n  //   setSomething(\"Test\");\n  // }, [])\n  //\n  // useEffect(() => {\n  //   if (shit !== \" tester\") {\n  //     setShit(\" tester\");\n  //   }\n  // }, [shit])\n\n  return (\n    <div className=\"home\">\n      <div className=\"profile-picture\">\n        <Avatar size={200} icon=\"user\" src={getRealRoute === \"portfolio\" ? `/portfolio/images/profile-picture.jpg` : `/images/profile-picture.jpg`}/>\n      </div>\n      <div className=\"name\">\n        <span>Syamsul Mohd Jafri</span>\n      </div>\n      <div className=\"job\">\n        Full Stack Software Engineer\n      </div>\n      <div>\n        <Row>\n          <Col col={6}>Profile sadas as das dasd sa das d</Col>\n          <Col col={6}>Experience dasd asd asd sad asd asd as sad </Col>\n        </Row>\n      </div>\n\n    </div>\n  )\n}\n\nexport default Home;\n","import React from 'react';\n\nconst Projects = () => {\n  return (\n    <div>\n      Project this and that\n    </div>\n  );\n}\n\nexport default Projects;\n","import React from \"react\";\nimport { Link } from 'react-router-dom';\nimport { Menu, Icon } from \"antd\";\n\nconst Navbar = (props) => {\n  return (\n    <Menu\n      onClick={props.handleNavbarClick}\n      selectedKeys={props.current}\n      mode=\"horizontal\"\n      theme=\"dark\"\n    >\n      <Menu.Item key=\"none\">\n        <Icon type=\"api\" />\n        Syamsul MJ\n      </Menu.Item>\n      <Menu.Item key=\"home\">\n        <Link to=\"/\">\n          <Icon type=\"home\" />\n          Home\n        </Link>\n      </Menu.Item>\n      <Menu.Item key=\"projects\">\n        <Link to=\"/projects\">\n          <Icon type=\"project\" />\n          Projects\n        </Link>\n      </Menu.Item>\n    </Menu>\n  );\n}\n\nexport default Navbar;\n","import React, { useState } from 'react';\nimport {\n  HashRouter as Portfolio,\n  Route,\n  Switch,\n } from 'react-router-dom';\nimport Home from './components/home/Home';\nimport Projects from './components/projects/Projects';\nimport { getRealPathname } from './lib/Helpers';\nimport Navbar from './components/home/Navbar';\n\nconst Router = () => {\n  const [current, setCurrent] = useState(getRealPathname() === \"\" ? \"home\" : getRealPathname());\n  const handleNavbarClick = e => {\n    if (e.key !== \"none\") {\n      setCurrent(e.key);\n    }\n  };\n\n  return (\n    <Portfolio>\n      <React.Fragment>\n        <Navbar\n            current={current}\n            handleNavbarClick={handleNavbarClick}\n          >\n        </Navbar>\n        <div>\n          <Switch>\n            <Route exact path=\"/\" component={ Home }/>\n            <Route path=\"/projects\" component={ Projects }/>\n          </Switch>\n        </div>\n      </React.Fragment>\n    </Portfolio>\n  )\n}\n\nexport default Router;\n","import React from 'react';\nimport Router from './Router';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Router />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/css/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}