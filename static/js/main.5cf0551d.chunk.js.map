{"version":3,"sources":["components/home/Home.js","components/projects/Projects.js","lib/Helpers.js","Router.js","components/home/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Home","useState","shit","setShit","something","setSomething","useEffect","className","Projects","getRealPathname","pathname","window","location","includes","replace","getRealRoute","Router","path","component","Navbar","props","onClick","handleNavbarClick","selectedKeys","current","mode","theme","Item","key","type","href","App","setCurrent","console","log","e","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sQAwBeA,EArBF,WAAO,IAAD,EACOC,mBAAS,IADhB,mBACVC,EADU,KACJC,EADI,OAEiBF,mBAAS,IAF1B,mBAEVG,EAFU,KAECC,EAFD,KAcjB,OAVAC,qBAAU,WACRD,EAAa,UACZ,IAEHC,qBAAU,WACK,YAATJ,GACFC,EAAQ,aAET,CAACD,IAGF,yBAAKK,UAAU,QACXH,EADJ,IACkBF,ICTPM,EARE,WACf,OACE,uDCJSC,EAAkB,WAC7B,IAAMC,EAAWC,OAAOC,SAASF,SAEjC,OADqBA,EAASG,SAAS,aAAeH,EAASI,QAAQ,cAAe,IAAMJ,EAASI,QAAQ,MAAO,KAIzGC,EAAe,WAC1B,OAAOJ,OAAOC,SAASF,SAASI,QAAQ,MAAO,KCgBlCE,EAbA,WACb,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,CAAOC,KAAI,UAAKF,IAAL,KAAwBG,UAAYlB,IAC/C,kBAAC,IAAD,CAAOiB,KAAI,UAAKF,IAAL,aAAgCG,UAAYV,Q,0BCmBlDW,EA7BA,SAACC,GAEd,OACE,kBAAC,IAAD,CACEC,QAASD,EAAME,kBACfC,aAAcH,EAAMI,QACpBC,KAAK,aACLC,MAAM,QAEN,kBAAC,IAAKC,KAAN,CAAWC,IAAI,QACb,kBAAC,IAAD,CAAMC,KAAK,QADb,cAIA,kBAAC,IAAKF,KAAN,CAAWC,IAAI,QACb,uBAAGE,KAAI,UAAKf,IAAL,MACL,kBAAC,IAAD,CAAMc,KAAK,SADb,SAKF,kBAAC,IAAKF,KAAN,CAAWC,IAAI,YACb,uBAAGE,KAAI,UAAKf,IAAL,cACL,kBAAC,IAAD,CAAMc,KAAK,YADb,eCIOE,EAxBH,WAAO,IAAD,EACc9B,mBAA+B,KAAtBQ,IAA2B,OAASA,KAD3D,mBACTe,EADS,KACAQ,EADA,KAYhB,OAHAC,QAAQC,IAAIzB,KACZwB,QAAQC,IAAI,mBAGV,yBAAK3B,UAAU,OACb,kBAAC,EAAD,CACEiB,QAASA,EACTF,kBAdoB,SAAAa,GACxBF,QAAQC,IAAI,SAAUC,GACR,SAAVA,EAAEP,KACJI,EAAWG,EAAEP,QAcb,kBAAC,EAAD,QCbcQ,QACW,cAA7BzB,OAAOC,SAASyB,UAEe,UAA7B1B,OAAOC,SAASyB,UAEhB1B,OAAOC,SAASyB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5cf0551d.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\n\nconst Home = () => {\n  const [shit, setShit] = useState(\"\");\n  const [something, setSomething] = useState(\"\");\n\n  useEffect(() => {\n    setSomething(\"Test\");\n  }, [])\n\n  useEffect(() => {\n    if (shit !== \" tester\") {\n      setShit(\" tester\");\n    }\n  }, [shit])\n\n  return (\n    <div className=\"home\">\n      { something } { shit }\n    </div>\n  )\n}\n\nexport default Home;\n","import React from 'react';\n\nconst Projects = () => {\n  return (\n    <div>\n      Project this and that\n    </div>\n  );\n}\n\nexport default Projects;\n","export const getRealPathname = () => {\n  const pathname = window.location.pathname;\n  const realPathname = pathname.includes(\"portfolio\") ? pathname.replace(\"/portfolio/\", \"\") : pathname.replace(/\\//g, \"\");\n  return realPathname;\n}\n\nexport const getRealRoute = () => {\n  return window.location.pathname.replace(/\\//g, \"\");\n}\n","import React from 'react';\nimport {\n  BrowserRouter as Portfolio,\n  Route,\n  Switch,\n } from 'react-router-dom';\nimport Home from './components/home/Home';\nimport Projects from './components/projects/Projects';\nimport { getRealRoute } from './lib/Helpers';\n\nconst Router = () => {\n  return (\n    <Portfolio>\n      <Switch>\n        <div>\n          <Route path={`${getRealRoute()}/`} component={ Home }/>\n          <Route path={`${getRealRoute()}/projects`} component={ Projects }/>\n        </div>\n      </Switch>\n    </Portfolio>\n  )\n}\n\nexport default Router;\n","import React from \"react\";\nimport { Menu, Icon } from \"antd\";\nimport { getRealRoute } from '../../lib/Helpers';\n\n// const { SubMenu } = Menu;\n\nconst Navbar = (props) => {\n\n  return (\n    <Menu\n      onClick={props.handleNavbarClick}\n      selectedKeys={props.current}\n      mode=\"horizontal\"\n      theme=\"dark\"\n    >\n      <Menu.Item key=\"none\">\n        <Icon type=\"api\" />\n        Syamsul MJ\n      </Menu.Item>\n      <Menu.Item key=\"home\">\n        <a href={`${getRealRoute()}/`}>\n          <Icon type=\"home\" />\n          Home\n        </a>\n      </Menu.Item>\n      <Menu.Item key=\"projects\">\n        <a href={`${getRealRoute()}/projects`}>\n          <Icon type=\"project\" />\n          Projects\n        </a>\n      </Menu.Item>\n    </Menu>\n  );\n}\n\nexport default Navbar;\n","import React, { useState } from 'react';\nimport Router from './Router';\nimport './assets/App.css';\nimport Navbar from './components/home/Navbar';\nimport { getRealPathname } from './lib/Helpers';\n\nconst App = () => {\n  const [current, setCurrent] = useState(getRealPathname() === \"\" ? \"home\" : getRealPathname());\n  const handleNavbarClick = e => {\n    console.log('click ', e);\n    if (e.key !== \"none\") {\n      setCurrent(e.key);\n    }\n  };\n\n  console.log(getRealPathname());\n  console.log(\"anak ayam tokwi\");\n\n  return (\n    <div className=\"App\">\n      <Navbar\n        current={current}\n        handleNavbarClick={handleNavbarClick}\n      >\n    </Navbar>\n      <Router></Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}